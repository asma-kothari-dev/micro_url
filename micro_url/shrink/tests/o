diff --git a/micro_url/shrink/tests/test_create_micro_url.py b/micro_url/shrink/tests/test_create_micro_url.py
index bc5d832..a9c8015 100644
--- a/micro_url/shrink/tests/test_create_micro_url.py
+++ b/micro_url/shrink/tests/test_create_micro_url.py
@@ -41,9 +41,10 @@ class MicroUrlTestCreate(unittest.TestCase):
         self.assertEqual(response.status_code, 302)
 
         # micro url object created
-        micro_url_object = MicroUrl.objects.get_micro_url_object(alias=data['alias'])
+        micro_url_object = MicroUrl.objects.get_micro_url_object(alias=data[
+                                                                 'alias'])
         self.assertNotEqual(micro_url_object, None)
- 
+
     def test_submit_link_without_alias(self):
         """ Enter valid link and no alias """
 
@@ -56,13 +57,13 @@ class MicroUrlTestCreate(unittest.TestCase):
         # micro url object created
         micro_url_object = MicroUrl.objects.get(link=data['link'])
         self.assertNotEqual(micro_url_object, None)
- 
+
     def test_submit_empty_form(self):
         """ Validation Error results in landing back to original page with errors """
 
         data = {}
         response = self.client.post('/', data)  # Post empty form
- 
+
         # 200 response contains the form error
         error = 'This field is required'
         self.__validate(response, error)
@@ -84,7 +85,8 @@ class MicroUrlTestCreate(unittest.TestCase):
         data = {'link': 'https://wwww.google.com/', 'alias': 'abcde'}
         response = self.client.post('/', data)  # post link and alias
         data = {'link': 'https://wwww.google.com?search=asma', 'alias': 'abcde'}
-        response = self.client.post('/', data)  # post new link with duplicate alias
+        # post new link with duplicate alias
+        response = self.client.post('/', data)
 
         # 200 response contains the form error
         error = 'is already taken'
@@ -94,7 +96,8 @@ class MicroUrlTestCreate(unittest.TestCase):
         """ Validation Error results in landing back to original page with errors """
 
         data = {'link': 'https://wwww.google.com/', 'alias': 'a@b!5'}
-        response = self.client.post('/', data)  # post alias with special characters
+        # post alias with special characters
+        response = self.client.post('/', data)
 
         # 200 response contains the form error
         error = 'Only alphanumeric characters are allowed'
@@ -129,4 +132,3 @@ class MicroUrlTestCreate(unittest.TestCase):
         # 200 response contains the form error
         error = 'Ensure this value has at most 5 characters'
         self.__validate(response, error)
-
diff --git a/micro_url/shrink/tests/test_display_micro_url.py b/micro_url/shrink/tests/test_display_micro_url.py
index e543e85..94ee780 100644
--- a/micro_url/shrink/tests/test_display_micro_url.py
+++ b/micro_url/shrink/tests/test_display_micro_url.py
@@ -29,13 +29,14 @@ class MicroUrlTestDisplay(unittest.TestCase):
     def __context(self, response):
         """ Extract context from response
         :return: <class 'django.template.context.RequestContext'>"""
-        
+
         return response.context[0]
 
     def test_display_micro_url(self):
         """ Display Micro URL """
 
-        endpoint = reverse('display_micro_url', args=(self.micro_url_object.id,))
+        endpoint = reverse('display_micro_url',
+                           args=(self.micro_url_object.id,))
         response = self.client.get(endpoint)  # perform GET request
 
         # response status code 200
@@ -57,4 +58,3 @@ class MicroUrlTestDisplay(unittest.TestCase):
         # response status code 404
         self.assertEqual(response.status_code, 404)
         self.assertIn('Page Not Found', response.content)
-
diff --git a/micro_url/shrink/tests/test_home.py b/micro_url/shrink/tests/test_home.py
index a8c5bfb..14db988 100644
--- a/micro_url/shrink/tests/test_home.py
+++ b/micro_url/shrink/tests/test_home.py
@@ -20,4 +20,3 @@ class MicroUrlTestHome(unittest.TestCase):
 
         response = self.client.get('/', follow=True)
         self.assertEqual(response.status_code, 200)
-
diff --git a/micro_url/shrink/tests/test_preview_micro_url.py b/micro_url/shrink/tests/test_preview_micro_url.py
index ffccb30..53a1e84 100644
--- a/micro_url/shrink/tests/test_preview_micro_url.py
+++ b/micro_url/shrink/tests/test_preview_micro_url.py
@@ -29,13 +29,14 @@ class MicroUrlTestPreview(unittest.TestCase):
     def __context(self, response):
         """ Extract context from response
         :return: <class 'django.template.context.RequestContext'>"""
-        
+
         return response.context[0]
 
     def test_preview_micro_url(self):
         """ Preview Micro URL """
 
-        endpoint = reverse('preview_micro_url', args=(self.micro_url_object.id,))
+        endpoint = reverse('preview_micro_url',
+                           args=(self.micro_url_object.id,))
         response = self.client.get(endpoint)  # perform GET request
 
         # response status code 200
@@ -62,5 +63,3 @@ class MicroUrlTestPreview(unittest.TestCase):
         # response status code 404
         self.assertEqual(response.status_code, 404)
         self.assertIn('Page Not Found', response.content)
-
-
diff --git a/micro_url/shrink/tests/test_redirect.py b/micro_url/shrink/tests/test_redirect.py
index 6888982..5854d80 100644
--- a/micro_url/shrink/tests/test_redirect.py
+++ b/micro_url/shrink/tests/test_redirect.py
@@ -68,5 +68,3 @@ class MicroUrlTestRedirect(unittest.TestCase):
             response = redirect(request)
         except Exception, exp:
             self.assertEqual(type(exp), Http404)
-
-
